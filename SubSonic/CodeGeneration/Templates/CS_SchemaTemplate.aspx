<%@ Page Language="C#" %>
<%@ Import namespace="SubSonic.Utilities"%>
<%@ Import Namespace="SubSonic" %>
<%
    //The data we need
    const string providerName = "#PROVIDER#";
    const string tableName = "#TABLE#";
    TableSchema.Table tbl = DataService.GetSchema(tableName, providerName, TableType.Table);
    DataProvider provider = DataService.Providers[providerName];
    ICodeLanguage lang = new CSharpCodeLanguage();

    TableSchema.TableColumnCollection cols = tbl.Columns;
    string className = tbl.ClassName + "Schema";
    string thisPK = null;
    string varPK = null;
    string varPKType = null;
    if(tbl.PrimaryKey != null)
    {
        thisPK = tbl.PrimaryKey.PropertyName;
        varPK = tbl.PrimaryKey.ArgumentName;
        varPKType = Utility.GetVariableType(tbl.PrimaryKey.DataType, tbl.PrimaryKey.IsNullable, lang);
    }
    const bool showGenerationInfo = true;

    //string baseClass = tbl.Provider.TableBaseClass;
    string baseClass = "TableSchema.Table";
    string collectionBaseClass = String.Format("List<{0}>", className);

    %>

<%
    if(showGenerationInfo)
    {%>
 //Generated on <%=DateTime.Now.ToString()%> by <%=Environment.UserName%>
<%
    }%>
// <auto-generated />
namespace <%=provider.GeneratedNamespace%>
{
	/// <summary>
	/// This is an ActiveRecord class which wraps the <%=tableName%> table.
	/// </summary>
	[Serializable]
	public partial class <%=className%> : <%=baseClass%>
	{
        public static <%=baseClass%> Schema
        {
            get
            {
                return new <%=className%>();
            }
        }
		#region .ctors and Default Settings
		
		public <%=className%>()
            :base("<%=tableName%>")
		{
		}
		
		#endregion
		
		#region Schema and Query Accessor	
		
		protected override void Initital() 
        {
			//Schema define
			this.Columns = new TableSchema.TableColumnCollection();
			this.SchemaName = @"<%=tbl.SchemaName%>";
            this.TableType = <%= tbl.TableType == TableType.Table ? "TableType.Table" : "TableType.View"%>;
			//columns
			<%
    foreach(TableSchema.TableColumn col in cols)
    {
        string varName = "col" + col.ArgumentName;
%>
			TableSchema.TableColumn <%=varName%> = new TableSchema.TableColumn(this);
			<%=varName%>.ColumnName = "<%=col.ColumnName%>";
			<%=varName%>.DataType = DbType.<%=col.DataType%>;
			<%=varName%>.MaxLength = <%=col.MaxLength%>;
			<%=varName%>.AutoIncrement = <%=col.AutoIncrement.ToString().ToLower()%>;
			<%=varName%>.IsNullable = <%=col.IsNullable.ToString().ToLower()%>;
			<%=varName%>.IsPrimaryKey = <%=col.IsPrimaryKey.ToString().ToLower()%>;
			<%=varName%>.IsForeignKey = <%=col.IsForeignKey.ToString().ToLower()%>;
			<%=varName%>.IsReadOnly = <%=col.IsReadOnly.ToString().ToLower()%>;
                
			<%
        foreach (SubSonic.TableSchema.ExtendedProperty p in col.ExtendedProperties)
        {
            if (string.Compare(p.PropertyName, "MS_Description", true) == 0)
            {
            %>
            <%=varName%>.ExtendedProperties.Add(new TableSchema.ExtendedProperty("SSX_COLUMN_DISPLAY_NAME","<%=p.PropertyValue%>"));
            <%
            }
            else
            {
            %>
            <%=varName%>.ExtendedProperties.Add(new TableSchema.ExtendedProperty("<%=p.PropertyName%>","<%=p.PropertyValue%>"));
            <%    
            } 
        }
        if(!String.IsNullOrEmpty(col.DefaultSetting))
            %>
			<%=varName%>.DefaultSetting = @"<%=col.DefaultSetting%>";
			<%
        if(col.IsForeignKey)%>
			<%=varName%>.ForeignKeyTableName = "<%=col.ForeignKeyTableName%>";
            <%=varName%>.ApplyExtendedProperties();
			this.Columns.Add(<%=varName%>);
			<%
    }
    foreach (TableSchema.PrimaryKeyTable pkt in tbl.PrimaryKeyTables)
    {
            %>
           this.PrimaryKeyTables.Add(new TableSchema.PrimaryKeyTable() 
                                                     { 
                                                       ColumnName = <%=pkt.ColumnName %>,
                                                       TableName = <%=pkt.TableName %> 
                                                      });
            <%
    }
    foreach (TableSchema.ForeignKeyTable fkt in tbl.ForeignKeys)
    {
            %>
            this.ForeignKeys.Add(new TableSchema.ForeignKeyTable(this) { ColumnName = <%=fkt.ColumnName%>,
                                                                         TableName = <%=fkt.TableName%>,
                                                                         PrimaryColumnName = <%=fkt.PrimaryColumnName%>,
                                                                         ForeignColumnName = <%=fkt.ForeignColumnName%>,
                                                                        });
            <%
    }
    foreach (TableSchema.ManyToManyRelationship mapToM in tbl.ManyToManys)
    {
            %>
            tbl.ManyToManys.Add(new TableSchema.ManyToManyRelationship(<%=mapToM.TableName%>)
                               { 
                                 ForeignTableName = <%=mapToM.ForeignTableName%>,
                                 ForeignPrimaryKey = <%=mapToM.ForeignPrimaryKey%>,
                                 MapTableLocalTableKeyColumn = <%=mapToM.MapTableLocalTableKeyColumn%>, 
                                 MapTableForeignTableKeyColumn = <%=mapToM.MapTableForeignTableKeyColumn%>
                               });
            <%
    }
    %>
		}
		#endregion
	}
}
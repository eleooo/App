using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eleooo.DAL
{
    /// <summary>
    /// Controller class for Orders
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class OrderController
    {
        // Preload our schema..
        Order thisSchemaLoad = new Order();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public OrderCollection FetchAll()
        {
            OrderCollection coll = new OrderCollection();
            Query qry = new Query(Order.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public OrderCollection FetchByID(object Id)
        {
            OrderCollection coll = new OrderCollection().Where("ID", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public OrderCollection FetchByQuery(Query qry)
        {
            OrderCollection coll = new OrderCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (Order.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (Order.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string OrderCode,DateTime OrderDate,string OrderCard,int OrderMemberID,int OrderSellerID,string OrderProduct,int? OrderQty,decimal? OrderSum,decimal? OrderSumOk,decimal? OrderRateSale,decimal? OrderRate,decimal? OrderPoint,decimal? OrderPay,decimal? OrderPayCash,decimal? OrderPayPoint,DateTime OrderDateUpload,DateTime OrderDateDeliver,int OrderStatus,string OrderMemo,int? OrderType,int? CreatedBy,DateTime? CreatedOn,int? ModifiedBy,DateTime? ModifiedOn,int? MansionId,decimal? ServiceSum,bool? IsNonOut,int? OrderNum,int? OrderOper,int? OrderModel,DateTime? OrderUpdateOn,bool? HasOutOfStock,decimal? OrderPrePoint,int? MsnType)
	    {
		    Order item = new Order();
		    
            item.OrderCode = OrderCode;
            
            item.OrderDate = OrderDate;
            
            item.OrderCard = OrderCard;
            
            item.OrderMemberID = OrderMemberID;
            
            item.OrderSellerID = OrderSellerID;
            
            item.OrderProduct = OrderProduct;
            
            item.OrderQty = OrderQty;
            
            item.OrderSum = OrderSum;
            
            item.OrderSumOk = OrderSumOk;
            
            item.OrderRateSale = OrderRateSale;
            
            item.OrderRate = OrderRate;
            
            item.OrderPoint = OrderPoint;
            
            item.OrderPay = OrderPay;
            
            item.OrderPayCash = OrderPayCash;
            
            item.OrderPayPoint = OrderPayPoint;
            
            item.OrderDateUpload = OrderDateUpload;
            
            item.OrderDateDeliver = OrderDateDeliver;
            
            item.OrderStatus = OrderStatus;
            
            item.OrderMemo = OrderMemo;
            
            item.OrderType = OrderType;
            
            item.CreatedBy = CreatedBy;
            
            item.CreatedOn = CreatedOn;
            
            item.ModifiedBy = ModifiedBy;
            
            item.ModifiedOn = ModifiedOn;
            
            item.MansionId = MansionId;
            
            item.ServiceSum = ServiceSum;
            
            item.IsNonOut = IsNonOut;
            
            item.OrderNum = OrderNum;
            
            item.OrderOper = OrderOper;
            
            item.OrderModel = OrderModel;
            
            item.OrderUpdateOn = OrderUpdateOn;
            
            item.HasOutOfStock = HasOutOfStock;
            
            item.OrderPrePoint = OrderPrePoint;
            
            item.MsnType = MsnType;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int Id,string OrderCode,DateTime OrderDate,string OrderCard,int OrderMemberID,int OrderSellerID,string OrderProduct,int? OrderQty,decimal? OrderSum,decimal? OrderSumOk,decimal? OrderRateSale,decimal? OrderRate,decimal? OrderPoint,decimal? OrderPay,decimal? OrderPayCash,decimal? OrderPayPoint,DateTime OrderDateUpload,DateTime OrderDateDeliver,int OrderStatus,string OrderMemo,int? OrderType,int? CreatedBy,DateTime? CreatedOn,int? ModifiedBy,DateTime? ModifiedOn,int? MansionId,decimal? ServiceSum,bool? IsNonOut,int? OrderNum,int? OrderOper,int? OrderModel,DateTime? OrderUpdateOn,bool? HasOutOfStock,decimal? OrderPrePoint,int? MsnType)
	    {
		    Order item = new Order();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Id = Id;
				
			item.OrderCode = OrderCode;
				
			item.OrderDate = OrderDate;
				
			item.OrderCard = OrderCard;
				
			item.OrderMemberID = OrderMemberID;
				
			item.OrderSellerID = OrderSellerID;
				
			item.OrderProduct = OrderProduct;
				
			item.OrderQty = OrderQty;
				
			item.OrderSum = OrderSum;
				
			item.OrderSumOk = OrderSumOk;
				
			item.OrderRateSale = OrderRateSale;
				
			item.OrderRate = OrderRate;
				
			item.OrderPoint = OrderPoint;
				
			item.OrderPay = OrderPay;
				
			item.OrderPayCash = OrderPayCash;
				
			item.OrderPayPoint = OrderPayPoint;
				
			item.OrderDateUpload = OrderDateUpload;
				
			item.OrderDateDeliver = OrderDateDeliver;
				
			item.OrderStatus = OrderStatus;
				
			item.OrderMemo = OrderMemo;
				
			item.OrderType = OrderType;
				
			item.CreatedBy = CreatedBy;
				
			item.CreatedOn = CreatedOn;
				
			item.ModifiedBy = ModifiedBy;
				
			item.ModifiedOn = ModifiedOn;
				
			item.MansionId = MansionId;
				
			item.ServiceSum = ServiceSum;
				
			item.IsNonOut = IsNonOut;
				
			item.OrderNum = OrderNum;
				
			item.OrderOper = OrderOper;
				
			item.OrderModel = OrderModel;
				
			item.OrderUpdateOn = OrderUpdateOn;
				
			item.HasOutOfStock = HasOutOfStock;
				
			item.OrderPrePoint = OrderPrePoint;
				
			item.MsnType = MsnType;
				
	        item.Save(UserName);
	    }
    }
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eleooo.DAL
{
    /// <summary>
    /// Controller class for PaymentRate
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class PaymentRateController
    {
        // Preload our schema..
        PaymentRate thisSchemaLoad = new PaymentRate();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public PaymentRateCollection FetchAll()
        {
            PaymentRateCollection coll = new PaymentRateCollection();
            Query qry = new Query(PaymentRate.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public PaymentRateCollection FetchByID(object PaymentRateID)
        {
            PaymentRateCollection coll = new PaymentRateCollection().Where("PaymentRateID", PaymentRateID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public PaymentRateCollection FetchByQuery(Query qry)
        {
            PaymentRateCollection coll = new PaymentRateCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object PaymentRateID)
        {
            return (PaymentRate.Delete(PaymentRateID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object PaymentRateID)
        {
            return (PaymentRate.Destroy(PaymentRateID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(DateTime? PaymentRateDate,int? PaymentRateCompanyID,decimal? PaymentRateSale,decimal? PaymentRateSum,string PaymentRateMemo,int? PaymentRateStatus,DateTime? PaymentRateDateStart,DateTime? PaymentRateDateEnd,decimal? PaymentRateCash,decimal? PaymentRateRate,int? CreatedBy,DateTime? CreatedOn,int? ModifiedBy,DateTime? ModifiedOn)
	    {
		    PaymentRate item = new PaymentRate();
		    
            item.PaymentRateDate = PaymentRateDate;
            
            item.PaymentRateCompanyID = PaymentRateCompanyID;
            
            item.PaymentRateSale = PaymentRateSale;
            
            item.PaymentRateSum = PaymentRateSum;
            
            item.PaymentRateMemo = PaymentRateMemo;
            
            item.PaymentRateStatus = PaymentRateStatus;
            
            item.PaymentRateDateStart = PaymentRateDateStart;
            
            item.PaymentRateDateEnd = PaymentRateDateEnd;
            
            item.PaymentRateCash = PaymentRateCash;
            
            item.PaymentRateRate = PaymentRateRate;
            
            item.CreatedBy = CreatedBy;
            
            item.CreatedOn = CreatedOn;
            
            item.ModifiedBy = ModifiedBy;
            
            item.ModifiedOn = ModifiedOn;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int PaymentRateID,DateTime? PaymentRateDate,int? PaymentRateCompanyID,decimal? PaymentRateSale,decimal? PaymentRateSum,string PaymentRateMemo,int? PaymentRateStatus,DateTime? PaymentRateDateStart,DateTime? PaymentRateDateEnd,decimal? PaymentRateCash,decimal? PaymentRateRate,int? CreatedBy,DateTime? CreatedOn,int? ModifiedBy,DateTime? ModifiedOn)
	    {
		    PaymentRate item = new PaymentRate();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.PaymentRateID = PaymentRateID;
				
			item.PaymentRateDate = PaymentRateDate;
				
			item.PaymentRateCompanyID = PaymentRateCompanyID;
				
			item.PaymentRateSale = PaymentRateSale;
				
			item.PaymentRateSum = PaymentRateSum;
				
			item.PaymentRateMemo = PaymentRateMemo;
				
			item.PaymentRateStatus = PaymentRateStatus;
				
			item.PaymentRateDateStart = PaymentRateDateStart;
				
			item.PaymentRateDateEnd = PaymentRateDateEnd;
				
			item.PaymentRateCash = PaymentRateCash;
				
			item.PaymentRateRate = PaymentRateRate;
				
			item.CreatedBy = CreatedBy;
				
			item.CreatedOn = CreatedOn;
				
			item.ModifiedBy = ModifiedBy;
				
			item.ModifiedOn = ModifiedOn;
				
	        item.Save(UserName);
	    }
    }
}

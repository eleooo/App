using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eleooo.DAL
{
	/// <summary>
	/// Strongly-typed collection for the PaymentCash class.
	/// </summary>
    [Serializable]
	public partial class PaymentCashCollection : ActiveList<PaymentCash, PaymentCashCollection>
	{	   
		public PaymentCashCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PaymentCashCollection</returns>
		public PaymentCashCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                PaymentCash o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the PaymentCash table.
	/// </summary>
	[Serializable]
	public partial class PaymentCash : ActiveRecord<PaymentCash>, IActiveRecord
	{
		#region .ctors and Default Settings
		static PaymentCash( )
        {
            BaseSchema = DB.GetSchema("PaymentCash");
        }
		public PaymentCash()
		{
		  //InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public PaymentCash(bool useDatabaseDefaults)
		{ 
            if(BaseSchema == null)
                BaseSchema = DB.GetSchema("PaymentCash");
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public PaymentCash(object keyID)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("PaymentCash");
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public PaymentCash(string columnName, object columnValue)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("PaymentCash");
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
                {
                    BaseSchema = DB.GetSchema("PaymentCash");
                }
				return BaseSchema;
			}
		}
		
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("PaymentCashCode")]
		[Bindable(true)]
		public string PaymentCashCode 
		{
			get { return GetColumnValue<string>(Columns.PaymentCashCode); }
			set { SetColumnValue(Columns.PaymentCashCode, value); }
		}
		  
		[XmlAttribute("PaymentCashDate")]
		[Bindable(true)]
		public DateTime PaymentCashDate 
		{
			get { return GetColumnValue<DateTime>(Columns.PaymentCashDate); }
			set { SetColumnValue(Columns.PaymentCashDate, value); }
		}
		  
		[XmlAttribute("PaymentCashMemberID")]
		[Bindable(true)]
		public int? PaymentCashMemberID 
		{
			get { return GetColumnValue<int?>(Columns.PaymentCashMemberID); }
			set { SetColumnValue(Columns.PaymentCashMemberID, value); }
		}
		  
		[XmlAttribute("PaymentCashCompanyID")]
		[Bindable(true)]
		public int? PaymentCashCompanyID 
		{
			get { return GetColumnValue<int?>(Columns.PaymentCashCompanyID); }
			set { SetColumnValue(Columns.PaymentCashCompanyID, value); }
		}
		  
		[XmlAttribute("PaymentCashSum")]
		[Bindable(true)]
		public decimal PaymentCashSum 
		{
			get { return GetColumnValue<decimal>(Columns.PaymentCashSum); }
			set { SetColumnValue(Columns.PaymentCashSum, value); }
		}
		  
		[XmlAttribute("PaymentStatus")]
		[Bindable(true)]
		public int PaymentStatus 
		{
			get { return GetColumnValue<int>(Columns.PaymentStatus); }
			set { SetColumnValue(Columns.PaymentStatus, value); }
		}
		  
		[XmlAttribute("PaymentType")]
		[Bindable(true)]
		public int? PaymentType 
		{
			get { return GetColumnValue<int?>(Columns.PaymentType); }
			set { SetColumnValue(Columns.PaymentType, value); }
		}
		  
		[XmlAttribute("PaymentOrderID")]
		[Bindable(true)]
		public int? PaymentOrderID 
		{
			get { return GetColumnValue<int?>(Columns.PaymentOrderID); }
			set { SetColumnValue(Columns.PaymentOrderID, value); }
		}
		  
		[XmlAttribute("PaymentMemo")]
		[Bindable(true)]
		public string PaymentMemo 
		{
			get { return GetColumnValue<string>(Columns.PaymentMemo); }
			set { SetColumnValue(Columns.PaymentMemo, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public int? CreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public int? ModifiedBy 
		{
			get { return GetColumnValue<int?>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPaymentCashCode,DateTime varPaymentCashDate,int? varPaymentCashMemberID,int? varPaymentCashCompanyID,decimal varPaymentCashSum,int varPaymentStatus,int? varPaymentType,int? varPaymentOrderID,string varPaymentMemo,int? varCreatedBy,DateTime? varCreatedOn,int? varModifiedBy,DateTime? varModifiedOn)
		{
			PaymentCash item = new PaymentCash();
			
			item.PaymentCashCode = varPaymentCashCode;
			
			item.PaymentCashDate = varPaymentCashDate;
			
			item.PaymentCashMemberID = varPaymentCashMemberID;
			
			item.PaymentCashCompanyID = varPaymentCashCompanyID;
			
			item.PaymentCashSum = varPaymentCashSum;
			
			item.PaymentStatus = varPaymentStatus;
			
			item.PaymentType = varPaymentType;
			
			item.PaymentOrderID = varPaymentOrderID;
			
			item.PaymentMemo = varPaymentMemo;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varPaymentCashCode,DateTime varPaymentCashDate,int? varPaymentCashMemberID,int? varPaymentCashCompanyID,decimal varPaymentCashSum,int varPaymentStatus,int? varPaymentType,int? varPaymentOrderID,string varPaymentMemo,int? varCreatedBy,DateTime? varCreatedOn,int? varModifiedBy,DateTime? varModifiedOn)
		{
			PaymentCash item = new PaymentCash();
			
				item.Id = varId;
			
				item.PaymentCashCode = varPaymentCashCode;
			
				item.PaymentCashDate = varPaymentCashDate;
			
				item.PaymentCashMemberID = varPaymentCashMemberID;
			
				item.PaymentCashCompanyID = varPaymentCashCompanyID;
			
				item.PaymentCashSum = varPaymentCashSum;
			
				item.PaymentStatus = varPaymentStatus;
			
				item.PaymentType = varPaymentType;
			
				item.PaymentOrderID = varPaymentOrderID;
			
				item.PaymentMemo = varPaymentMemo;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentCashCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentCashDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentCashMemberIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentCashCompanyIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentCashSumColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentStatusColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentTypeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentOrderIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentMemoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string PaymentCashCode = @"PaymentCashCode";
			 public static string PaymentCashDate = @"PaymentCashDate";
			 public static string PaymentCashMemberID = @"PaymentCashMemberID";
			 public static string PaymentCashCompanyID = @"PaymentCashCompanyID";
			 public static string PaymentCashSum = @"PaymentCashSum";
			 public static string PaymentStatus = @"PaymentStatus";
			 public static string PaymentType = @"PaymentType";
			 public static string PaymentOrderID = @"PaymentOrderID";
			 public static string PaymentMemo = @"PaymentMemo";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eleooo.DAL
{
	/// <summary>
	/// Strongly-typed collection for the Order class.
	/// </summary>
    [Serializable]
	public partial class OrderCollection : ActiveList<Order, OrderCollection>
	{	   
		public OrderCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>OrderCollection</returns>
		public OrderCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Order o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Orders table.
	/// </summary>
	[Serializable]
	public partial class Order : ActiveRecord<Order>, IActiveRecord
	{
		#region .ctors and Default Settings
		static Order( )
        {
            BaseSchema = DB.GetSchema("Orders");
        }
		public Order()
		{
		  //InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Order(bool useDatabaseDefaults)
		{ 
            if(BaseSchema == null)
                BaseSchema = DB.GetSchema("Orders");
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Order(object keyID)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Orders");
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Order(string columnName, object columnValue)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Orders");
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
                {
                    BaseSchema = DB.GetSchema("Orders");
                }
				return BaseSchema;
			}
		}
		
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("OrderCode")]
		[Bindable(true)]
		public string OrderCode 
		{
			get { return GetColumnValue<string>(Columns.OrderCode); }
			set { SetColumnValue(Columns.OrderCode, value); }
		}
		  
		[XmlAttribute("OrderDate")]
		[Bindable(true)]
		public DateTime OrderDate 
		{
			get { return GetColumnValue<DateTime>(Columns.OrderDate); }
			set { SetColumnValue(Columns.OrderDate, value); }
		}
		  
		[XmlAttribute("OrderCard")]
		[Bindable(true)]
		public string OrderCard 
		{
			get { return GetColumnValue<string>(Columns.OrderCard); }
			set { SetColumnValue(Columns.OrderCard, value); }
		}
		  
		[XmlAttribute("OrderMemberID")]
		[Bindable(true)]
		public int OrderMemberID 
		{
			get { return GetColumnValue<int>(Columns.OrderMemberID); }
			set { SetColumnValue(Columns.OrderMemberID, value); }
		}
		  
		[XmlAttribute("OrderSellerID")]
		[Bindable(true)]
		public int OrderSellerID 
		{
			get { return GetColumnValue<int>(Columns.OrderSellerID); }
			set { SetColumnValue(Columns.OrderSellerID, value); }
		}
		  
		[XmlAttribute("OrderProduct")]
		[Bindable(true)]
		public string OrderProduct 
		{
			get { return GetColumnValue<string>(Columns.OrderProduct); }
			set { SetColumnValue(Columns.OrderProduct, value); }
		}
		  
		[XmlAttribute("OrderQty")]
		[Bindable(true)]
		public int? OrderQty 
		{
			get { return GetColumnValue<int?>(Columns.OrderQty); }
			set { SetColumnValue(Columns.OrderQty, value); }
		}
		  
		[XmlAttribute("OrderSum")]
		[Bindable(true)]
		public decimal? OrderSum 
		{
			get { return GetColumnValue<decimal?>(Columns.OrderSum); }
			set { SetColumnValue(Columns.OrderSum, value); }
		}
		  
		[XmlAttribute("OrderSumOk")]
		[Bindable(true)]
		public decimal? OrderSumOk 
		{
			get { return GetColumnValue<decimal?>(Columns.OrderSumOk); }
			set { SetColumnValue(Columns.OrderSumOk, value); }
		}
		  
		[XmlAttribute("OrderRateSale")]
		[Bindable(true)]
		public decimal? OrderRateSale 
		{
			get { return GetColumnValue<decimal?>(Columns.OrderRateSale); }
			set { SetColumnValue(Columns.OrderRateSale, value); }
		}
		  
		[XmlAttribute("OrderRate")]
		[Bindable(true)]
		public decimal? OrderRate 
		{
			get { return GetColumnValue<decimal?>(Columns.OrderRate); }
			set { SetColumnValue(Columns.OrderRate, value); }
		}
		  
		[XmlAttribute("OrderPoint")]
		[Bindable(true)]
		public decimal? OrderPoint 
		{
			get { return GetColumnValue<decimal?>(Columns.OrderPoint); }
			set { SetColumnValue(Columns.OrderPoint, value); }
		}
		  
		[XmlAttribute("OrderPay")]
		[Bindable(true)]
		public decimal? OrderPay 
		{
			get { return GetColumnValue<decimal?>(Columns.OrderPay); }
			set { SetColumnValue(Columns.OrderPay, value); }
		}
		  
		[XmlAttribute("OrderPayCash")]
		[Bindable(true)]
		public decimal? OrderPayCash 
		{
			get { return GetColumnValue<decimal?>(Columns.OrderPayCash); }
			set { SetColumnValue(Columns.OrderPayCash, value); }
		}
		  
		[XmlAttribute("OrderPayPoint")]
		[Bindable(true)]
		public decimal? OrderPayPoint 
		{
			get { return GetColumnValue<decimal?>(Columns.OrderPayPoint); }
			set { SetColumnValue(Columns.OrderPayPoint, value); }
		}
		  
		[XmlAttribute("OrderDateUpload")]
		[Bindable(true)]
		public DateTime OrderDateUpload 
		{
			get { return GetColumnValue<DateTime>(Columns.OrderDateUpload); }
			set { SetColumnValue(Columns.OrderDateUpload, value); }
		}
		  
		[XmlAttribute("OrderDateDeliver")]
		[Bindable(true)]
		public DateTime OrderDateDeliver 
		{
			get { return GetColumnValue<DateTime>(Columns.OrderDateDeliver); }
			set { SetColumnValue(Columns.OrderDateDeliver, value); }
		}
		  
		[XmlAttribute("OrderStatus")]
		[Bindable(true)]
		public int OrderStatus 
		{
			get { return GetColumnValue<int>(Columns.OrderStatus); }
			set { SetColumnValue(Columns.OrderStatus, value); }
		}
		  
		[XmlAttribute("OrderMemo")]
		[Bindable(true)]
		public string OrderMemo 
		{
			get { return GetColumnValue<string>(Columns.OrderMemo); }
			set { SetColumnValue(Columns.OrderMemo, value); }
		}
		  
		[XmlAttribute("OrderType")]
		[Bindable(true)]
		public int? OrderType 
		{
			get { return GetColumnValue<int?>(Columns.OrderType); }
			set { SetColumnValue(Columns.OrderType, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public int? CreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public int? ModifiedBy 
		{
			get { return GetColumnValue<int?>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("MansionId")]
		[Bindable(true)]
		public int? MansionId 
		{
			get { return GetColumnValue<int?>(Columns.MansionId); }
			set { SetColumnValue(Columns.MansionId, value); }
		}
		  
		[XmlAttribute("ServiceSum")]
		[Bindable(true)]
		public decimal? ServiceSum 
		{
			get { return GetColumnValue<decimal?>(Columns.ServiceSum); }
			set { SetColumnValue(Columns.ServiceSum, value); }
		}
		  
		[XmlAttribute("IsNonOut")]
		[Bindable(true)]
		public bool? IsNonOut 
		{
			get { return GetColumnValue<bool?>(Columns.IsNonOut); }
			set { SetColumnValue(Columns.IsNonOut, value); }
		}
		  
		[XmlAttribute("OrderNum")]
		[Bindable(true)]
		public int? OrderNum 
		{
			get { return GetColumnValue<int?>(Columns.OrderNum); }
			set { SetColumnValue(Columns.OrderNum, value); }
		}
		  
		[XmlAttribute("OrderOper")]
		[Bindable(true)]
		public int? OrderOper 
		{
			get { return GetColumnValue<int?>(Columns.OrderOper); }
			set { SetColumnValue(Columns.OrderOper, value); }
		}
		  
		[XmlAttribute("OrderModel")]
		[Bindable(true)]
		public int? OrderModel 
		{
			get { return GetColumnValue<int?>(Columns.OrderModel); }
			set { SetColumnValue(Columns.OrderModel, value); }
		}
		  
		[XmlAttribute("OrderUpdateOn")]
		[Bindable(true)]
		public DateTime? OrderUpdateOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.OrderUpdateOn); }
			set { SetColumnValue(Columns.OrderUpdateOn, value); }
		}
		  
		[XmlAttribute("HasOutOfStock")]
		[Bindable(true)]
		public bool? HasOutOfStock 
		{
			get { return GetColumnValue<bool?>(Columns.HasOutOfStock); }
			set { SetColumnValue(Columns.HasOutOfStock, value); }
		}
		  
		[XmlAttribute("OrderPrePoint")]
		[Bindable(true)]
		public decimal? OrderPrePoint 
		{
			get { return GetColumnValue<decimal?>(Columns.OrderPrePoint); }
			set { SetColumnValue(Columns.OrderPrePoint, value); }
		}
		  
		[XmlAttribute("MsnType")]
		[Bindable(true)]
		public int? MsnType 
		{
			get { return GetColumnValue<int?>(Columns.MsnType); }
			set { SetColumnValue(Columns.MsnType, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varOrderCode,DateTime varOrderDate,string varOrderCard,int varOrderMemberID,int varOrderSellerID,string varOrderProduct,int? varOrderQty,decimal? varOrderSum,decimal? varOrderSumOk,decimal? varOrderRateSale,decimal? varOrderRate,decimal? varOrderPoint,decimal? varOrderPay,decimal? varOrderPayCash,decimal? varOrderPayPoint,DateTime varOrderDateUpload,DateTime varOrderDateDeliver,int varOrderStatus,string varOrderMemo,int? varOrderType,int? varCreatedBy,DateTime? varCreatedOn,int? varModifiedBy,DateTime? varModifiedOn,int? varMansionId,decimal? varServiceSum,bool? varIsNonOut,int? varOrderNum,int? varOrderOper,int? varOrderModel,DateTime? varOrderUpdateOn,bool? varHasOutOfStock,decimal? varOrderPrePoint,int? varMsnType)
		{
			Order item = new Order();
			
			item.OrderCode = varOrderCode;
			
			item.OrderDate = varOrderDate;
			
			item.OrderCard = varOrderCard;
			
			item.OrderMemberID = varOrderMemberID;
			
			item.OrderSellerID = varOrderSellerID;
			
			item.OrderProduct = varOrderProduct;
			
			item.OrderQty = varOrderQty;
			
			item.OrderSum = varOrderSum;
			
			item.OrderSumOk = varOrderSumOk;
			
			item.OrderRateSale = varOrderRateSale;
			
			item.OrderRate = varOrderRate;
			
			item.OrderPoint = varOrderPoint;
			
			item.OrderPay = varOrderPay;
			
			item.OrderPayCash = varOrderPayCash;
			
			item.OrderPayPoint = varOrderPayPoint;
			
			item.OrderDateUpload = varOrderDateUpload;
			
			item.OrderDateDeliver = varOrderDateDeliver;
			
			item.OrderStatus = varOrderStatus;
			
			item.OrderMemo = varOrderMemo;
			
			item.OrderType = varOrderType;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
			item.MansionId = varMansionId;
			
			item.ServiceSum = varServiceSum;
			
			item.IsNonOut = varIsNonOut;
			
			item.OrderNum = varOrderNum;
			
			item.OrderOper = varOrderOper;
			
			item.OrderModel = varOrderModel;
			
			item.OrderUpdateOn = varOrderUpdateOn;
			
			item.HasOutOfStock = varHasOutOfStock;
			
			item.OrderPrePoint = varOrderPrePoint;
			
			item.MsnType = varMsnType;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varOrderCode,DateTime varOrderDate,string varOrderCard,int varOrderMemberID,int varOrderSellerID,string varOrderProduct,int? varOrderQty,decimal? varOrderSum,decimal? varOrderSumOk,decimal? varOrderRateSale,decimal? varOrderRate,decimal? varOrderPoint,decimal? varOrderPay,decimal? varOrderPayCash,decimal? varOrderPayPoint,DateTime varOrderDateUpload,DateTime varOrderDateDeliver,int varOrderStatus,string varOrderMemo,int? varOrderType,int? varCreatedBy,DateTime? varCreatedOn,int? varModifiedBy,DateTime? varModifiedOn,int? varMansionId,decimal? varServiceSum,bool? varIsNonOut,int? varOrderNum,int? varOrderOper,int? varOrderModel,DateTime? varOrderUpdateOn,bool? varHasOutOfStock,decimal? varOrderPrePoint,int? varMsnType)
		{
			Order item = new Order();
			
				item.Id = varId;
			
				item.OrderCode = varOrderCode;
			
				item.OrderDate = varOrderDate;
			
				item.OrderCard = varOrderCard;
			
				item.OrderMemberID = varOrderMemberID;
			
				item.OrderSellerID = varOrderSellerID;
			
				item.OrderProduct = varOrderProduct;
			
				item.OrderQty = varOrderQty;
			
				item.OrderSum = varOrderSum;
			
				item.OrderSumOk = varOrderSumOk;
			
				item.OrderRateSale = varOrderRateSale;
			
				item.OrderRate = varOrderRate;
			
				item.OrderPoint = varOrderPoint;
			
				item.OrderPay = varOrderPay;
			
				item.OrderPayCash = varOrderPayCash;
			
				item.OrderPayPoint = varOrderPayPoint;
			
				item.OrderDateUpload = varOrderDateUpload;
			
				item.OrderDateDeliver = varOrderDateDeliver;
			
				item.OrderStatus = varOrderStatus;
			
				item.OrderMemo = varOrderMemo;
			
				item.OrderType = varOrderType;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
				item.MansionId = varMansionId;
			
				item.ServiceSum = varServiceSum;
			
				item.IsNonOut = varIsNonOut;
			
				item.OrderNum = varOrderNum;
			
				item.OrderOper = varOrderOper;
			
				item.OrderModel = varOrderModel;
			
				item.OrderUpdateOn = varOrderUpdateOn;
			
				item.HasOutOfStock = varHasOutOfStock;
			
				item.OrderPrePoint = varOrderPrePoint;
			
				item.MsnType = varMsnType;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderCardColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderMemberIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderSellerIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderProductColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderQtyColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderSumColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderSumOkColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderRateSaleColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderRateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderPointColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderPayColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderPayCashColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderPayPointColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderDateUploadColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderDateDeliverColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderStatusColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderMemoColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderTypeColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn MansionIdColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceSumColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn IsNonOutColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderNumColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderOperColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderModelColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderUpdateOnColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn HasOutOfStockColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderPrePointColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn MsnTypeColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string OrderCode = @"OrderCode";
			 public static string OrderDate = @"OrderDate";
			 public static string OrderCard = @"OrderCard";
			 public static string OrderMemberID = @"OrderMemberID";
			 public static string OrderSellerID = @"OrderSellerID";
			 public static string OrderProduct = @"OrderProduct";
			 public static string OrderQty = @"OrderQty";
			 public static string OrderSum = @"OrderSum";
			 public static string OrderSumOk = @"OrderSumOk";
			 public static string OrderRateSale = @"OrderRateSale";
			 public static string OrderRate = @"OrderRate";
			 public static string OrderPoint = @"OrderPoint";
			 public static string OrderPay = @"OrderPay";
			 public static string OrderPayCash = @"OrderPayCash";
			 public static string OrderPayPoint = @"OrderPayPoint";
			 public static string OrderDateUpload = @"OrderDateUpload";
			 public static string OrderDateDeliver = @"OrderDateDeliver";
			 public static string OrderStatus = @"OrderStatus";
			 public static string OrderMemo = @"OrderMemo";
			 public static string OrderType = @"OrderType";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string MansionId = @"MansionId";
			 public static string ServiceSum = @"ServiceSum";
			 public static string IsNonOut = @"IsNonOut";
			 public static string OrderNum = @"OrderNum";
			 public static string OrderOper = @"OrderOper";
			 public static string OrderModel = @"OrderModel";
			 public static string OrderUpdateOn = @"OrderUpdateOn";
			 public static string HasOutOfStock = @"HasOutOfStock";
			 public static string OrderPrePoint = @"OrderPrePoint";
			 public static string MsnType = @"MsnType";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eleooo.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysErrorLog class.
	/// </summary>
    [Serializable]
	public partial class SysErrorLogCollection : ActiveList<SysErrorLog, SysErrorLogCollection>
	{	   
		public SysErrorLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysErrorLogCollection</returns>
		public SysErrorLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysErrorLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Sys_Error_Log table.
	/// </summary>
	[Serializable]
	public partial class SysErrorLog : ActiveRecord<SysErrorLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		static SysErrorLog( )
        {
            BaseSchema = DB.GetSchema("Sys_Error_Log");
        }
		public SysErrorLog()
		{
		  //InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysErrorLog(bool useDatabaseDefaults)
		{ 
            if(BaseSchema == null)
                BaseSchema = DB.GetSchema("Sys_Error_Log");
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysErrorLog(object keyID)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Sys_Error_Log");
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysErrorLog(string columnName, object columnValue)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Sys_Error_Log");
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
                {
                    BaseSchema = DB.GetSchema("Sys_Error_Log");
                }
				return BaseSchema;
			}
		}
		
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("LogDate")]
		[Bindable(true)]
		public DateTime? LogDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.LogDate); }
			set { SetColumnValue(Columns.LogDate, value); }
		}
		  
		[XmlAttribute("LogSource")]
		[Bindable(true)]
		public string LogSource 
		{
			get { return GetColumnValue<string>(Columns.LogSource); }
			set { SetColumnValue(Columns.LogSource, value); }
		}
		  
		[XmlAttribute("LogMessage")]
		[Bindable(true)]
		public string LogMessage 
		{
			get { return GetColumnValue<string>(Columns.LogMessage); }
			set { SetColumnValue(Columns.LogMessage, value); }
		}
		  
		[XmlAttribute("LogStackTrace")]
		[Bindable(true)]
		public string LogStackTrace 
		{
			get { return GetColumnValue<string>(Columns.LogStackTrace); }
			set { SetColumnValue(Columns.LogStackTrace, value); }
		}
		  
		[XmlAttribute("SubSys")]
		[Bindable(true)]
		public int? SubSys 
		{
			get { return GetColumnValue<int?>(Columns.SubSys); }
			set { SetColumnValue(Columns.SubSys, value); }
		}
		  
		[XmlAttribute("LogUser")]
		[Bindable(true)]
		public int? LogUser 
		{
			get { return GetColumnValue<int?>(Columns.LogUser); }
			set { SetColumnValue(Columns.LogUser, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime? varLogDate,string varLogSource,string varLogMessage,string varLogStackTrace,int? varSubSys,int? varLogUser)
		{
			SysErrorLog item = new SysErrorLog();
			
			item.LogDate = varLogDate;
			
			item.LogSource = varLogSource;
			
			item.LogMessage = varLogMessage;
			
			item.LogStackTrace = varLogStackTrace;
			
			item.SubSys = varSubSys;
			
			item.LogUser = varLogUser;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,DateTime? varLogDate,string varLogSource,string varLogMessage,string varLogStackTrace,int? varSubSys,int? varLogUser)
		{
			SysErrorLog item = new SysErrorLog();
			
				item.Id = varId;
			
				item.LogDate = varLogDate;
			
				item.LogSource = varLogSource;
			
				item.LogMessage = varLogMessage;
			
				item.LogStackTrace = varLogStackTrace;
			
				item.SubSys = varSubSys;
			
				item.LogUser = varLogUser;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn LogDateColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn LogSourceColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LogMessageColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn LogStackTraceColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SubSysColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn LogUserColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string LogDate = @"LogDate";
			 public static string LogSource = @"LogSource";
			 public static string LogMessage = @"LogMessage";
			 public static string LogStackTrace = @"LogStackTrace";
			 public static string SubSys = @"SubSys";
			 public static string LogUser = @"LogUser";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

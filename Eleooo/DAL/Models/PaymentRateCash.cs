using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eleooo.DAL
{
	/// <summary>
	/// Strongly-typed collection for the PaymentRateCash class.
	/// </summary>
    [Serializable]
	public partial class PaymentRateCashCollection : ActiveList<PaymentRateCash, PaymentRateCashCollection>
	{	   
		public PaymentRateCashCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PaymentRateCashCollection</returns>
		public PaymentRateCashCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                PaymentRateCash o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the PaymentRateCash table.
	/// </summary>
	[Serializable]
	public partial class PaymentRateCash : ActiveRecord<PaymentRateCash>, IActiveRecord
	{
		#region .ctors and Default Settings
		static PaymentRateCash( )
        {
            BaseSchema = DB.GetSchema("PaymentRateCash");
        }
		public PaymentRateCash()
		{
		  //InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public PaymentRateCash(bool useDatabaseDefaults)
		{ 
            if(BaseSchema == null)
                BaseSchema = DB.GetSchema("PaymentRateCash");
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public PaymentRateCash(object keyID)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("PaymentRateCash");
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public PaymentRateCash(string columnName, object columnValue)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("PaymentRateCash");
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
                {
                    BaseSchema = DB.GetSchema("PaymentRateCash");
                }
				return BaseSchema;
			}
		}
		
		#endregion
		
		#region Props
		  
		[XmlAttribute("PaymentRateCashID")]
		[Bindable(true)]
		public int PaymentRateCashID 
		{
			get { return GetColumnValue<int>(Columns.PaymentRateCashID); }
			set { SetColumnValue(Columns.PaymentRateCashID, value); }
		}
		  
		[XmlAttribute("PaymentRateCashDate")]
		[Bindable(true)]
		public DateTime? PaymentRateCashDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.PaymentRateCashDate); }
			set { SetColumnValue(Columns.PaymentRateCashDate, value); }
		}
		  
		[XmlAttribute("PaymentRateCashDateStart")]
		[Bindable(true)]
		public DateTime? PaymentRateCashDateStart 
		{
			get { return GetColumnValue<DateTime?>(Columns.PaymentRateCashDateStart); }
			set { SetColumnValue(Columns.PaymentRateCashDateStart, value); }
		}
		  
		[XmlAttribute("PaymentRateCashDateEnd")]
		[Bindable(true)]
		public DateTime? PaymentRateCashDateEnd 
		{
			get { return GetColumnValue<DateTime?>(Columns.PaymentRateCashDateEnd); }
			set { SetColumnValue(Columns.PaymentRateCashDateEnd, value); }
		}
		  
		[XmlAttribute("PaymentRateCashCompanyID")]
		[Bindable(true)]
		public int? PaymentRateCashCompanyID 
		{
			get { return GetColumnValue<int?>(Columns.PaymentRateCashCompanyID); }
			set { SetColumnValue(Columns.PaymentRateCashCompanyID, value); }
		}
		  
		[XmlAttribute("PaymentRateCash1")]
		[Bindable(true)]
		public decimal? PaymentRateCash1 
		{
			get { return GetColumnValue<decimal?>(Columns.PaymentRateCash1); }
			set { SetColumnValue(Columns.PaymentRateCash1, value); }
		}
		  
		[XmlAttribute("PaymentRateCash2")]
		[Bindable(true)]
		public decimal? PaymentRateCash2 
		{
			get { return GetColumnValue<decimal?>(Columns.PaymentRateCash2); }
			set { SetColumnValue(Columns.PaymentRateCash2, value); }
		}
		  
		[XmlAttribute("PaymentRateCashSum")]
		[Bindable(true)]
		public decimal? PaymentRateCashSum 
		{
			get { return GetColumnValue<decimal?>(Columns.PaymentRateCashSum); }
			set { SetColumnValue(Columns.PaymentRateCashSum, value); }
		}
		  
		[XmlAttribute("PaymentRateCashMemo")]
		[Bindable(true)]
		public string PaymentRateCashMemo 
		{
			get { return GetColumnValue<string>(Columns.PaymentRateCashMemo); }
			set { SetColumnValue(Columns.PaymentRateCashMemo, value); }
		}
		  
		[XmlAttribute("PaymentRateCashStatus")]
		[Bindable(true)]
		public int? PaymentRateCashStatus 
		{
			get { return GetColumnValue<int?>(Columns.PaymentRateCashStatus); }
			set { SetColumnValue(Columns.PaymentRateCashStatus, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public int? CreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public int? ModifiedBy 
		{
			get { return GetColumnValue<int?>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime? varPaymentRateCashDate,DateTime? varPaymentRateCashDateStart,DateTime? varPaymentRateCashDateEnd,int? varPaymentRateCashCompanyID,decimal? varPaymentRateCash1,decimal? varPaymentRateCash2,decimal? varPaymentRateCashSum,string varPaymentRateCashMemo,int? varPaymentRateCashStatus,int? varCreatedBy,DateTime? varCreatedOn,int? varModifiedBy,DateTime? varModifiedOn)
		{
			PaymentRateCash item = new PaymentRateCash();
			
			item.PaymentRateCashDate = varPaymentRateCashDate;
			
			item.PaymentRateCashDateStart = varPaymentRateCashDateStart;
			
			item.PaymentRateCashDateEnd = varPaymentRateCashDateEnd;
			
			item.PaymentRateCashCompanyID = varPaymentRateCashCompanyID;
			
			item.PaymentRateCash1 = varPaymentRateCash1;
			
			item.PaymentRateCash2 = varPaymentRateCash2;
			
			item.PaymentRateCashSum = varPaymentRateCashSum;
			
			item.PaymentRateCashMemo = varPaymentRateCashMemo;
			
			item.PaymentRateCashStatus = varPaymentRateCashStatus;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPaymentRateCashID,DateTime? varPaymentRateCashDate,DateTime? varPaymentRateCashDateStart,DateTime? varPaymentRateCashDateEnd,int? varPaymentRateCashCompanyID,decimal? varPaymentRateCash1,decimal? varPaymentRateCash2,decimal? varPaymentRateCashSum,string varPaymentRateCashMemo,int? varPaymentRateCashStatus,int? varCreatedBy,DateTime? varCreatedOn,int? varModifiedBy,DateTime? varModifiedOn)
		{
			PaymentRateCash item = new PaymentRateCash();
			
				item.PaymentRateCashID = varPaymentRateCashID;
			
				item.PaymentRateCashDate = varPaymentRateCashDate;
			
				item.PaymentRateCashDateStart = varPaymentRateCashDateStart;
			
				item.PaymentRateCashDateEnd = varPaymentRateCashDateEnd;
			
				item.PaymentRateCashCompanyID = varPaymentRateCashCompanyID;
			
				item.PaymentRateCash1 = varPaymentRateCash1;
			
				item.PaymentRateCash2 = varPaymentRateCash2;
			
				item.PaymentRateCashSum = varPaymentRateCashSum;
			
				item.PaymentRateCashMemo = varPaymentRateCashMemo;
			
				item.PaymentRateCashStatus = varPaymentRateCashStatus;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PaymentRateCashIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentRateCashDateColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentRateCashDateStartColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentRateCashDateEndColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentRateCashCompanyIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentRateCash1Column
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentRateCash2Column
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentRateCashSumColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentRateCashMemoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentRateCashStatusColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PaymentRateCashID = @"PaymentRateCashID";
			 public static string PaymentRateCashDate = @"PaymentRateCashDate";
			 public static string PaymentRateCashDateStart = @"PaymentRateCashDateStart";
			 public static string PaymentRateCashDateEnd = @"PaymentRateCashDateEnd";
			 public static string PaymentRateCashCompanyID = @"PaymentRateCashCompanyID";
			 public static string PaymentRateCash1 = @"PaymentRateCash1";
			 public static string PaymentRateCash2 = @"PaymentRateCash2";
			 public static string PaymentRateCashSum = @"PaymentRateCashSum";
			 public static string PaymentRateCashMemo = @"PaymentRateCashMemo";
			 public static string PaymentRateCashStatus = @"PaymentRateCashStatus";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

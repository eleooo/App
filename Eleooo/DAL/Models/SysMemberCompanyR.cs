using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eleooo.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysMemberCompanyR class.
	/// </summary>
    [Serializable]
	public partial class SysMemberCompanyRCollection : ActiveList<SysMemberCompanyR, SysMemberCompanyRCollection>
	{	   
		public SysMemberCompanyRCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysMemberCompanyRCollection</returns>
		public SysMemberCompanyRCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysMemberCompanyR o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Sys_Member_CompanyR table.
	/// </summary>
	[Serializable]
	public partial class SysMemberCompanyR : ActiveRecord<SysMemberCompanyR>, IActiveRecord
	{
		#region .ctors and Default Settings
		static SysMemberCompanyR( )
        {
            BaseSchema = DB.GetSchema("Sys_Member_CompanyR");
        }
		public SysMemberCompanyR()
		{
		  //InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysMemberCompanyR(bool useDatabaseDefaults)
		{ 
            if(BaseSchema == null)
                BaseSchema = DB.GetSchema("Sys_Member_CompanyR");
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysMemberCompanyR(object keyID)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Sys_Member_CompanyR");
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysMemberCompanyR(string columnName, object columnValue)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Sys_Member_CompanyR");
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
                {
                    BaseSchema = DB.GetSchema("Sys_Member_CompanyR");
                }
				return BaseSchema;
			}
		}
		
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("CompanyDate")]
		[Bindable(true)]
		public DateTime? CompanyDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CompanyDate); }
			set { SetColumnValue(Columns.CompanyDate, value); }
		}
		  
		[XmlAttribute("CompanyName")]
		[Bindable(true)]
		public string CompanyName 
		{
			get { return GetColumnValue<string>(Columns.CompanyName); }
			set { SetColumnValue(Columns.CompanyName, value); }
		}
		  
		[XmlAttribute("CompanyAddress")]
		[Bindable(true)]
		public string CompanyAddress 
		{
			get { return GetColumnValue<string>(Columns.CompanyAddress); }
			set { SetColumnValue(Columns.CompanyAddress, value); }
		}
		  
		[XmlAttribute("CompanyDesc")]
		[Bindable(true)]
		public string CompanyDesc 
		{
			get { return GetColumnValue<string>(Columns.CompanyDesc); }
			set { SetColumnValue(Columns.CompanyDesc, value); }
		}
		  
		[XmlAttribute("CompanyTel")]
		[Bindable(true)]
		public string CompanyTel 
		{
			get { return GetColumnValue<string>(Columns.CompanyTel); }
			set { SetColumnValue(Columns.CompanyTel, value); }
		}
		  
		[XmlAttribute("CompanyMemberID")]
		[Bindable(true)]
		public int? CompanyMemberID 
		{
			get { return GetColumnValue<int?>(Columns.CompanyMemberID); }
			set { SetColumnValue(Columns.CompanyMemberID, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public int? CreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public int? ModifiedBy 
		{
			get { return GetColumnValue<int?>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("CompanyStatus")]
		[Bindable(true)]
		public int? CompanyStatus 
		{
			get { return GetColumnValue<int?>(Columns.CompanyStatus); }
			set { SetColumnValue(Columns.CompanyStatus, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime? varCompanyDate,string varCompanyName,string varCompanyAddress,string varCompanyDesc,string varCompanyTel,int? varCompanyMemberID,int? varCreatedBy,DateTime? varCreatedOn,int? varModifiedBy,DateTime? varModifiedOn,int? varCompanyStatus)
		{
			SysMemberCompanyR item = new SysMemberCompanyR();
			
			item.CompanyDate = varCompanyDate;
			
			item.CompanyName = varCompanyName;
			
			item.CompanyAddress = varCompanyAddress;
			
			item.CompanyDesc = varCompanyDesc;
			
			item.CompanyTel = varCompanyTel;
			
			item.CompanyMemberID = varCompanyMemberID;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
			item.CompanyStatus = varCompanyStatus;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,DateTime? varCompanyDate,string varCompanyName,string varCompanyAddress,string varCompanyDesc,string varCompanyTel,int? varCompanyMemberID,int? varCreatedBy,DateTime? varCreatedOn,int? varModifiedBy,DateTime? varModifiedOn,int? varCompanyStatus)
		{
			SysMemberCompanyR item = new SysMemberCompanyR();
			
				item.Id = varId;
			
				item.CompanyDate = varCompanyDate;
			
				item.CompanyName = varCompanyName;
			
				item.CompanyAddress = varCompanyAddress;
			
				item.CompanyDesc = varCompanyDesc;
			
				item.CompanyTel = varCompanyTel;
			
				item.CompanyMemberID = varCompanyMemberID;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
				item.CompanyStatus = varCompanyStatus;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyDateColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyAddressColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyDescColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyTelColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyMemberIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyStatusColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string CompanyDate = @"CompanyDate";
			 public static string CompanyName = @"CompanyName";
			 public static string CompanyAddress = @"CompanyAddress";
			 public static string CompanyDesc = @"CompanyDesc";
			 public static string CompanyTel = @"CompanyTel";
			 public static string CompanyMemberID = @"CompanyMemberID";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string CompanyStatus = @"CompanyStatus";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

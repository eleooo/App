using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eleooo.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysReward class.
	/// </summary>
    [Serializable]
	public partial class SysRewardCollection : ActiveList<SysReward, SysRewardCollection>
	{	   
		public SysRewardCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysRewardCollection</returns>
		public SysRewardCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysReward o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Sys_Reward table.
	/// </summary>
	[Serializable]
	public partial class SysReward : ActiveRecord<SysReward>, IActiveRecord
	{
		#region .ctors and Default Settings
		static SysReward( )
        {
            BaseSchema = DB.GetSchema("Sys_Reward");
        }
		public SysReward()
		{
		  //InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysReward(bool useDatabaseDefaults)
		{ 
            if(BaseSchema == null)
                BaseSchema = DB.GetSchema("Sys_Reward");
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysReward(object keyID)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Sys_Reward");
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysReward(string columnName, object columnValue)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Sys_Reward");
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
                {
                    BaseSchema = DB.GetSchema("Sys_Reward");
                }
				return BaseSchema;
			}
		}
		
		#endregion
		
		#region Props
		  
		[XmlAttribute("RewardID")]
		[Bindable(true)]
		public int RewardID 
		{
			get { return GetColumnValue<int>(Columns.RewardID); }
			set { SetColumnValue(Columns.RewardID, value); }
		}
		  
		[XmlAttribute("RewardDate")]
		[Bindable(true)]
		public DateTime? RewardDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.RewardDate); }
			set { SetColumnValue(Columns.RewardDate, value); }
		}
		  
		[XmlAttribute("RewardEndDate")]
		[Bindable(true)]
		public DateTime? RewardEndDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.RewardEndDate); }
			set { SetColumnValue(Columns.RewardEndDate, value); }
		}
		  
		[XmlAttribute("RewardRate")]
		[Bindable(true)]
		public decimal? RewardRate 
		{
			get { return GetColumnValue<decimal?>(Columns.RewardRate); }
			set { SetColumnValue(Columns.RewardRate, value); }
		}
		  
		[XmlAttribute("RewardFlag")]
		[Bindable(true)]
		public int? RewardFlag 
		{
			get { return GetColumnValue<int?>(Columns.RewardFlag); }
			set { SetColumnValue(Columns.RewardFlag, value); }
		}
		  
		[XmlAttribute("RewardMemo")]
		[Bindable(true)]
		public string RewardMemo 
		{
			get { return GetColumnValue<string>(Columns.RewardMemo); }
			set { SetColumnValue(Columns.RewardMemo, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime? varRewardDate,DateTime? varRewardEndDate,decimal? varRewardRate,int? varRewardFlag,string varRewardMemo)
		{
			SysReward item = new SysReward();
			
			item.RewardDate = varRewardDate;
			
			item.RewardEndDate = varRewardEndDate;
			
			item.RewardRate = varRewardRate;
			
			item.RewardFlag = varRewardFlag;
			
			item.RewardMemo = varRewardMemo;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varRewardID,DateTime? varRewardDate,DateTime? varRewardEndDate,decimal? varRewardRate,int? varRewardFlag,string varRewardMemo)
		{
			SysReward item = new SysReward();
			
				item.RewardID = varRewardID;
			
				item.RewardDate = varRewardDate;
			
				item.RewardEndDate = varRewardEndDate;
			
				item.RewardRate = varRewardRate;
			
				item.RewardFlag = varRewardFlag;
			
				item.RewardMemo = varRewardMemo;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn RewardIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RewardDateColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RewardEndDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn RewardRateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RewardFlagColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RewardMemoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string RewardID = @"RewardID";
			 public static string RewardDate = @"RewardDate";
			 public static string RewardEndDate = @"RewardEndDate";
			 public static string RewardRate = @"RewardRate";
			 public static string RewardFlag = @"RewardFlag";
			 public static string RewardMemo = @"RewardMemo";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eleooo.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysCompanyItem class.
	/// </summary>
    [Serializable]
	public partial class SysCompanyItemCollection : ActiveList<SysCompanyItem, SysCompanyItemCollection>
	{	   
		public SysCompanyItemCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysCompanyItemCollection</returns>
		public SysCompanyItemCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysCompanyItem o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Sys_Company_Item table.
	/// </summary>
	[Serializable]
	public partial class SysCompanyItem : ActiveRecord<SysCompanyItem>, IActiveRecord
	{
		#region .ctors and Default Settings
		static SysCompanyItem( )
        {
            BaseSchema = DB.GetSchema("Sys_Company_Item");
        }
		public SysCompanyItem()
		{
		  //InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysCompanyItem(bool useDatabaseDefaults)
		{ 
            if(BaseSchema == null)
                BaseSchema = DB.GetSchema("Sys_Company_Item");
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysCompanyItem(object keyID)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Sys_Company_Item");
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysCompanyItem(string columnName, object columnValue)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Sys_Company_Item");
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
                {
                    BaseSchema = DB.GetSchema("Sys_Company_Item");
                }
				return BaseSchema;
			}
		}
		
		#endregion
		
		#region Props
		  
		[XmlAttribute("ItemID")]
		[Bindable(true)]
		public int ItemID 
		{
			get { return GetColumnValue<int>(Columns.ItemID); }
			set { SetColumnValue(Columns.ItemID, value); }
		}
		  
		[XmlAttribute("ItemTitle")]
		[Bindable(true)]
		public string ItemTitle 
		{
			get { return GetColumnValue<string>(Columns.ItemTitle); }
			set { SetColumnValue(Columns.ItemTitle, value); }
		}
		  
		[XmlAttribute("ItemIntro")]
		[Bindable(true)]
		public string ItemIntro 
		{
			get { return GetColumnValue<string>(Columns.ItemIntro); }
			set { SetColumnValue(Columns.ItemIntro, value); }
		}
		  
		[XmlAttribute("ItemContent")]
		[Bindable(true)]
		public string ItemContent 
		{
			get { return GetColumnValue<string>(Columns.ItemContent); }
			set { SetColumnValue(Columns.ItemContent, value); }
		}
		  
		[XmlAttribute("ItemTips")]
		[Bindable(true)]
		public string ItemTips 
		{
			get { return GetColumnValue<string>(Columns.ItemTips); }
			set { SetColumnValue(Columns.ItemTips, value); }
		}
		  
		[XmlAttribute("CompanyID")]
		[Bindable(true)]
		public int CompanyID 
		{
			get { return GetColumnValue<int>(Columns.CompanyID); }
			set { SetColumnValue(Columns.CompanyID, value); }
		}
		  
		[XmlAttribute("ItemAmount")]
		[Bindable(true)]
		public int? ItemAmount 
		{
			get { return GetColumnValue<int?>(Columns.ItemAmount); }
			set { SetColumnValue(Columns.ItemAmount, value); }
		}
		  
		[XmlAttribute("ItemSum")]
		[Bindable(true)]
		public decimal? ItemSum 
		{
			get { return GetColumnValue<decimal?>(Columns.ItemSum); }
			set { SetColumnValue(Columns.ItemSum, value); }
		}
		  
		[XmlAttribute("ItemPoint")]
		[Bindable(true)]
		public decimal? ItemPoint 
		{
			get { return GetColumnValue<decimal?>(Columns.ItemPoint); }
			set { SetColumnValue(Columns.ItemPoint, value); }
		}
		  
		[XmlAttribute("ItemClicked")]
		[Bindable(true)]
		public int? ItemClicked 
		{
			get { return GetColumnValue<int?>(Columns.ItemClicked); }
			set { SetColumnValue(Columns.ItemClicked, value); }
		}
		  
		[XmlAttribute("ItemUsed")]
		[Bindable(true)]
		public int? ItemUsed 
		{
			get { return GetColumnValue<int?>(Columns.ItemUsed); }
			set { SetColumnValue(Columns.ItemUsed, value); }
		}
		  
		[XmlAttribute("ItemPic")]
		[Bindable(true)]
		public string ItemPic 
		{
			get { return GetColumnValue<string>(Columns.ItemPic); }
			set { SetColumnValue(Columns.ItemPic, value); }
		}
		  
		[XmlAttribute("ItemPic1")]
		[Bindable(true)]
		public string ItemPic1 
		{
			get { return GetColumnValue<string>(Columns.ItemPic1); }
			set { SetColumnValue(Columns.ItemPic1, value); }
		}
		  
		[XmlAttribute("ItemPic2")]
		[Bindable(true)]
		public string ItemPic2 
		{
			get { return GetColumnValue<string>(Columns.ItemPic2); }
			set { SetColumnValue(Columns.ItemPic2, value); }
		}
		  
		[XmlAttribute("ItemAddr")]
		[Bindable(true)]
		public string ItemAddr 
		{
			get { return GetColumnValue<string>(Columns.ItemAddr); }
			set { SetColumnValue(Columns.ItemAddr, value); }
		}
		  
		[XmlAttribute("ItemDate")]
		[Bindable(true)]
		public DateTime? ItemDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ItemDate); }
			set { SetColumnValue(Columns.ItemDate, value); }
		}
		  
		[XmlAttribute("ItemEndDate")]
		[Bindable(true)]
		public DateTime? ItemEndDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ItemEndDate); }
			set { SetColumnValue(Columns.ItemEndDate, value); }
		}
		  
		[XmlAttribute("OrderSumLimit")]
		[Bindable(true)]
		public decimal? OrderSumLimit 
		{
			get { return GetColumnValue<decimal?>(Columns.OrderSumLimit); }
			set { SetColumnValue(Columns.OrderSumLimit, value); }
		}
		  
		[XmlAttribute("MemberLimit")]
		[Bindable(true)]
		public int? MemberLimit 
		{
			get { return GetColumnValue<int?>(Columns.MemberLimit); }
			set { SetColumnValue(Columns.MemberLimit, value); }
		}
		  
		[XmlAttribute("ItemLimit")]
		[Bindable(true)]
		public int? ItemLimit 
		{
			get { return GetColumnValue<int?>(Columns.ItemLimit); }
			set { SetColumnValue(Columns.ItemLimit, value); }
		}
		  
		[XmlAttribute("AreaDepth")]
		[Bindable(true)]
		public string AreaDepth 
		{
			get { return GetColumnValue<string>(Columns.AreaDepth); }
			set { SetColumnValue(Columns.AreaDepth, value); }
		}
		  
		[XmlAttribute("IsDeleted")]
		[Bindable(true)]
		public bool? IsDeleted 
		{
			get { return GetColumnValue<bool?>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		  
		[XmlAttribute("IsPass")]
		[Bindable(true)]
		public bool? IsPass 
		{
			get { return GetColumnValue<bool?>(Columns.IsPass); }
			set { SetColumnValue(Columns.IsPass, value); }
		}
		  
		[XmlAttribute("IsCanDel")]
		[Bindable(true)]
		public int? IsCanDel 
		{
			get { return GetColumnValue<int?>(Columns.IsCanDel); }
			set { SetColumnValue(Columns.IsCanDel, value); }
		}
		  
		[XmlAttribute("ItemPic3")]
		[Bindable(true)]
		public string ItemPic3 
		{
			get { return GetColumnValue<string>(Columns.ItemPic3); }
			set { SetColumnValue(Columns.ItemPic3, value); }
		}
		  
		[XmlAttribute("ItemPic4")]
		[Bindable(true)]
		public string ItemPic4 
		{
			get { return GetColumnValue<string>(Columns.ItemPic4); }
			set { SetColumnValue(Columns.ItemPic4, value); }
		}
		  
		[XmlAttribute("ItemPic5")]
		[Bindable(true)]
		public string ItemPic5 
		{
			get { return GetColumnValue<string>(Columns.ItemPic5); }
			set { SetColumnValue(Columns.ItemPic5, value); }
		}
		  
		[XmlAttribute("ItemPic6")]
		[Bindable(true)]
		public string ItemPic6 
		{
			get { return GetColumnValue<string>(Columns.ItemPic6); }
			set { SetColumnValue(Columns.ItemPic6, value); }
		}
		  
		[XmlAttribute("ItemPic7")]
		[Bindable(true)]
		public string ItemPic7 
		{
			get { return GetColumnValue<string>(Columns.ItemPic7); }
			set { SetColumnValue(Columns.ItemPic7, value); }
		}
		  
		[XmlAttribute("ItemInfo")]
		[Bindable(true)]
		public string ItemInfo 
		{
			get { return GetColumnValue<string>(Columns.ItemInfo); }
			set { SetColumnValue(Columns.ItemInfo, value); }
		}
		  
		[XmlAttribute("WorkingHours")]
		[Bindable(true)]
		public string WorkingHours 
		{
			get { return GetColumnValue<string>(Columns.WorkingHours); }
			set { SetColumnValue(Columns.WorkingHours, value); }
		}
		  
		[XmlAttribute("ItemStatus")]
		[Bindable(true)]
		public bool? ItemStatus 
		{
			get { return GetColumnValue<bool?>(Columns.ItemStatus); }
			set { SetColumnValue(Columns.ItemStatus, value); }
		}
		  
		[XmlAttribute("OrderFreqLimit")]
		[Bindable(true)]
		public int? OrderFreqLimit 
		{
			get { return GetColumnValue<int?>(Columns.OrderFreqLimit); }
			set { SetColumnValue(Columns.OrderFreqLimit, value); }
		}
		  
		[XmlAttribute("ItemNeedPay")]
		[Bindable(true)]
		public decimal? ItemNeedPay 
		{
			get { return GetColumnValue<decimal?>(Columns.ItemNeedPay); }
			set { SetColumnValue(Columns.ItemNeedPay, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varItemTitle,string varItemIntro,string varItemContent,string varItemTips,int varCompanyID,int? varItemAmount,decimal? varItemSum,decimal? varItemPoint,int? varItemClicked,int? varItemUsed,string varItemPic,string varItemPic1,string varItemPic2,string varItemAddr,DateTime? varItemDate,DateTime? varItemEndDate,decimal? varOrderSumLimit,int? varMemberLimit,int? varItemLimit,string varAreaDepth,bool? varIsDeleted,bool? varIsPass,int? varIsCanDel,string varItemPic3,string varItemPic4,string varItemPic5,string varItemPic6,string varItemPic7,string varItemInfo,string varWorkingHours,bool? varItemStatus,int? varOrderFreqLimit,decimal? varItemNeedPay)
		{
			SysCompanyItem item = new SysCompanyItem();
			
			item.ItemTitle = varItemTitle;
			
			item.ItemIntro = varItemIntro;
			
			item.ItemContent = varItemContent;
			
			item.ItemTips = varItemTips;
			
			item.CompanyID = varCompanyID;
			
			item.ItemAmount = varItemAmount;
			
			item.ItemSum = varItemSum;
			
			item.ItemPoint = varItemPoint;
			
			item.ItemClicked = varItemClicked;
			
			item.ItemUsed = varItemUsed;
			
			item.ItemPic = varItemPic;
			
			item.ItemPic1 = varItemPic1;
			
			item.ItemPic2 = varItemPic2;
			
			item.ItemAddr = varItemAddr;
			
			item.ItemDate = varItemDate;
			
			item.ItemEndDate = varItemEndDate;
			
			item.OrderSumLimit = varOrderSumLimit;
			
			item.MemberLimit = varMemberLimit;
			
			item.ItemLimit = varItemLimit;
			
			item.AreaDepth = varAreaDepth;
			
			item.IsDeleted = varIsDeleted;
			
			item.IsPass = varIsPass;
			
			item.IsCanDel = varIsCanDel;
			
			item.ItemPic3 = varItemPic3;
			
			item.ItemPic4 = varItemPic4;
			
			item.ItemPic5 = varItemPic5;
			
			item.ItemPic6 = varItemPic6;
			
			item.ItemPic7 = varItemPic7;
			
			item.ItemInfo = varItemInfo;
			
			item.WorkingHours = varWorkingHours;
			
			item.ItemStatus = varItemStatus;
			
			item.OrderFreqLimit = varOrderFreqLimit;
			
			item.ItemNeedPay = varItemNeedPay;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varItemID,string varItemTitle,string varItemIntro,string varItemContent,string varItemTips,int varCompanyID,int? varItemAmount,decimal? varItemSum,decimal? varItemPoint,int? varItemClicked,int? varItemUsed,string varItemPic,string varItemPic1,string varItemPic2,string varItemAddr,DateTime? varItemDate,DateTime? varItemEndDate,decimal? varOrderSumLimit,int? varMemberLimit,int? varItemLimit,string varAreaDepth,bool? varIsDeleted,bool? varIsPass,int? varIsCanDel,string varItemPic3,string varItemPic4,string varItemPic5,string varItemPic6,string varItemPic7,string varItemInfo,string varWorkingHours,bool? varItemStatus,int? varOrderFreqLimit,decimal? varItemNeedPay)
		{
			SysCompanyItem item = new SysCompanyItem();
			
				item.ItemID = varItemID;
			
				item.ItemTitle = varItemTitle;
			
				item.ItemIntro = varItemIntro;
			
				item.ItemContent = varItemContent;
			
				item.ItemTips = varItemTips;
			
				item.CompanyID = varCompanyID;
			
				item.ItemAmount = varItemAmount;
			
				item.ItemSum = varItemSum;
			
				item.ItemPoint = varItemPoint;
			
				item.ItemClicked = varItemClicked;
			
				item.ItemUsed = varItemUsed;
			
				item.ItemPic = varItemPic;
			
				item.ItemPic1 = varItemPic1;
			
				item.ItemPic2 = varItemPic2;
			
				item.ItemAddr = varItemAddr;
			
				item.ItemDate = varItemDate;
			
				item.ItemEndDate = varItemEndDate;
			
				item.OrderSumLimit = varOrderSumLimit;
			
				item.MemberLimit = varMemberLimit;
			
				item.ItemLimit = varItemLimit;
			
				item.AreaDepth = varAreaDepth;
			
				item.IsDeleted = varIsDeleted;
			
				item.IsPass = varIsPass;
			
				item.IsCanDel = varIsCanDel;
			
				item.ItemPic3 = varItemPic3;
			
				item.ItemPic4 = varItemPic4;
			
				item.ItemPic5 = varItemPic5;
			
				item.ItemPic6 = varItemPic6;
			
				item.ItemPic7 = varItemPic7;
			
				item.ItemInfo = varItemInfo;
			
				item.WorkingHours = varWorkingHours;
			
				item.ItemStatus = varItemStatus;
			
				item.OrderFreqLimit = varOrderFreqLimit;
			
				item.ItemNeedPay = varItemNeedPay;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ItemIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemTitleColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemIntroColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemContentColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemTipsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemAmountColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemSumColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemPointColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemClickedColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemUsedColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemPicColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemPic1Column
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemPic2Column
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemAddrColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemDateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemEndDateColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderSumLimitColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn MemberLimitColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemLimitColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn AreaDepthColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn IsDeletedColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPassColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn IsCanDelColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemPic3Column
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemPic4Column
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemPic5Column
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemPic6Column
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemPic7Column
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemInfoColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkingHoursColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemStatusColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderFreqLimitColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemNeedPayColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ItemID = @"ItemID";
			 public static string ItemTitle = @"ItemTitle";
			 public static string ItemIntro = @"ItemIntro";
			 public static string ItemContent = @"ItemContent";
			 public static string ItemTips = @"ItemTips";
			 public static string CompanyID = @"CompanyID";
			 public static string ItemAmount = @"ItemAmount";
			 public static string ItemSum = @"ItemSum";
			 public static string ItemPoint = @"ItemPoint";
			 public static string ItemClicked = @"ItemClicked";
			 public static string ItemUsed = @"ItemUsed";
			 public static string ItemPic = @"ItemPic";
			 public static string ItemPic1 = @"ItemPic1";
			 public static string ItemPic2 = @"ItemPic2";
			 public static string ItemAddr = @"ItemAddr";
			 public static string ItemDate = @"ItemDate";
			 public static string ItemEndDate = @"ItemEndDate";
			 public static string OrderSumLimit = @"OrderSumLimit";
			 public static string MemberLimit = @"MemberLimit";
			 public static string ItemLimit = @"ItemLimit";
			 public static string AreaDepth = @"AreaDepth";
			 public static string IsDeleted = @"IsDeleted";
			 public static string IsPass = @"IsPass";
			 public static string IsCanDel = @"IsCanDel";
			 public static string ItemPic3 = @"ItemPic3";
			 public static string ItemPic4 = @"ItemPic4";
			 public static string ItemPic5 = @"ItemPic5";
			 public static string ItemPic6 = @"ItemPic6";
			 public static string ItemPic7 = @"ItemPic7";
			 public static string ItemInfo = @"ItemInfo";
			 public static string WorkingHours = @"WorkingHours";
			 public static string ItemStatus = @"ItemStatus";
			 public static string OrderFreqLimit = @"OrderFreqLimit";
			 public static string ItemNeedPay = @"ItemNeedPay";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

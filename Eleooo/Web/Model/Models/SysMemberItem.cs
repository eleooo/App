using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Eleooo.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysMemberItem class.
	/// </summary>
    [Serializable]
	public partial class SysMemberItemCollection : ActiveList<SysMemberItem, SysMemberItemCollection>
	{	   
		public SysMemberItemCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysMemberItemCollection</returns>
		public SysMemberItemCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysMemberItem o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Sys_Member_Item table.
	/// </summary>
	[Serializable]
	public partial class SysMemberItem : ActiveRecord<SysMemberItem>, IActiveRecord
	{
		#region .ctors and Default Settings
		static SysMemberItem( )
        {
            BaseSchema = DB.GetSchema("Sys_Member_Item");
        }
		public SysMemberItem()
		{
		  //InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysMemberItem(bool useDatabaseDefaults)
		{ 
            if(BaseSchema == null)
                BaseSchema = DB.GetSchema("Sys_Member_Item");
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysMemberItem(object keyID)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Sys_Member_Item");
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysMemberItem(string columnName, object columnValue)
		{ 
            if(BaseSchema == null) 
                BaseSchema = DB.GetSchema("Sys_Member_Item");
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
                {
                    BaseSchema = DB.GetSchema("Sys_Member_Item");
                }
				return BaseSchema;
			}
		}
		
		#endregion
		
		#region Props
		  
		[XmlAttribute("ItemID")]
		[Bindable(true)]
		public int ItemID 
		{
			get { return GetColumnValue<int>(Columns.ItemID); }
			set { SetColumnValue(Columns.ItemID, value); }
		}
		  
		[XmlAttribute("CompanyItemID")]
		[Bindable(true)]
		public int CompanyItemID 
		{
			get { return GetColumnValue<int>(Columns.CompanyItemID); }
			set { SetColumnValue(Columns.CompanyItemID, value); }
		}
		  
		[XmlAttribute("MemberID")]
		[Bindable(true)]
		public int MemberID 
		{
			get { return GetColumnValue<int>(Columns.MemberID); }
			set { SetColumnValue(Columns.MemberID, value); }
		}
		  
		[XmlAttribute("ItemDate")]
		[Bindable(true)]
		public DateTime ItemDate 
		{
			get { return GetColumnValue<DateTime>(Columns.ItemDate); }
			set { SetColumnValue(Columns.ItemDate, value); }
		}
		  
		[XmlAttribute("ItemStatus")]
		[Bindable(true)]
		public int ItemStatus 
		{
			get { return GetColumnValue<int>(Columns.ItemStatus); }
			set { SetColumnValue(Columns.ItemStatus, value); }
		}
		  
		[XmlAttribute("SetDate")]
		[Bindable(true)]
		public DateTime? SetDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.SetDate); }
			set { SetColumnValue(Columns.SetDate, value); }
		}
		  
		[XmlAttribute("OrderSum")]
		[Bindable(true)]
		public decimal? OrderSum 
		{
			get { return GetColumnValue<decimal?>(Columns.OrderSum); }
			set { SetColumnValue(Columns.OrderSum, value); }
		}
		  
		[XmlAttribute("CompanyID")]
		[Bindable(true)]
		public int? CompanyID 
		{
			get { return GetColumnValue<int?>(Columns.CompanyID); }
			set { SetColumnValue(Columns.CompanyID, value); }
		}
		  
		[XmlAttribute("ItemPoint")]
		[Bindable(true)]
		public decimal? ItemPoint 
		{
			get { return GetColumnValue<decimal?>(Columns.ItemPoint); }
			set { SetColumnValue(Columns.ItemPoint, value); }
		}
		  
		[XmlAttribute("PaymentID")]
		[Bindable(true)]
		public int? PaymentID 
		{
			get { return GetColumnValue<int?>(Columns.PaymentID); }
			set { SetColumnValue(Columns.PaymentID, value); }
		}
		  
		[XmlAttribute("IsCanModifiedDate")]
		[Bindable(true)]
		public bool? IsCanModifiedDate 
		{
			get { return GetColumnValue<bool?>(Columns.IsCanModifiedDate); }
			set { SetColumnValue(Columns.IsCanModifiedDate, value); }
		}
		  
		[XmlAttribute("OrderDate")]
		[Bindable(true)]
		public DateTime? OrderDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.OrderDate); }
			set { SetColumnValue(Columns.OrderDate, value); }
		}
		  
		[XmlAttribute("OrderID")]
		[Bindable(true)]
		public int? OrderID 
		{
			get { return GetColumnValue<int?>(Columns.OrderID); }
			set { SetColumnValue(Columns.OrderID, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varCompanyItemID,int varMemberID,DateTime varItemDate,int varItemStatus,DateTime? varSetDate,decimal? varOrderSum,int? varCompanyID,decimal? varItemPoint,int? varPaymentID,bool? varIsCanModifiedDate,DateTime? varOrderDate,int? varOrderID)
		{
			SysMemberItem item = new SysMemberItem();
			
			item.CompanyItemID = varCompanyItemID;
			
			item.MemberID = varMemberID;
			
			item.ItemDate = varItemDate;
			
			item.ItemStatus = varItemStatus;
			
			item.SetDate = varSetDate;
			
			item.OrderSum = varOrderSum;
			
			item.CompanyID = varCompanyID;
			
			item.ItemPoint = varItemPoint;
			
			item.PaymentID = varPaymentID;
			
			item.IsCanModifiedDate = varIsCanModifiedDate;
			
			item.OrderDate = varOrderDate;
			
			item.OrderID = varOrderID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varItemID,int varCompanyItemID,int varMemberID,DateTime varItemDate,int varItemStatus,DateTime? varSetDate,decimal? varOrderSum,int? varCompanyID,decimal? varItemPoint,int? varPaymentID,bool? varIsCanModifiedDate,DateTime? varOrderDate,int? varOrderID)
		{
			SysMemberItem item = new SysMemberItem();
			
				item.ItemID = varItemID;
			
				item.CompanyItemID = varCompanyItemID;
			
				item.MemberID = varMemberID;
			
				item.ItemDate = varItemDate;
			
				item.ItemStatus = varItemStatus;
			
				item.SetDate = varSetDate;
			
				item.OrderSum = varOrderSum;
			
				item.CompanyID = varCompanyID;
			
				item.ItemPoint = varItemPoint;
			
				item.PaymentID = varPaymentID;
			
				item.IsCanModifiedDate = varIsCanModifiedDate;
			
				item.OrderDate = varOrderDate;
			
				item.OrderID = varOrderID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ItemIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyItemIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MemberIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemStatusColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SetDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderSumColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemPointColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn IsCanModifiedDateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderDateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ItemID = @"ItemID";
			 public static string CompanyItemID = @"CompanyItemID";
			 public static string MemberID = @"MemberID";
			 public static string ItemDate = @"ItemDate";
			 public static string ItemStatus = @"ItemStatus";
			 public static string SetDate = @"SetDate";
			 public static string OrderSum = @"OrderSum";
			 public static string CompanyID = @"CompanyID";
			 public static string ItemPoint = @"ItemPoint";
			 public static string PaymentID = @"PaymentID";
			 public static string IsCanModifiedDate = @"IsCanModifiedDate";
			 public static string OrderDate = @"OrderDate";
			 public static string OrderID = @"OrderID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
